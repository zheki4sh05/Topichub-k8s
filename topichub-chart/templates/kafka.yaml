apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.services.kafka.name }}
  namespace: default
  labels:
    app: {{ .Values.services.kafka.name }}
spec:
  serviceName: {{ .Values.services.kafka.name }}
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.services.kafka.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.services.kafka.name }}
    spec:
      containers:
       - name: kafka-service
         image: wurstmeister/kafka
         imagePullPolicy: IfNotPresent
         ports:
          - containerPort: 9092
         env:
          - name: KAFKA_BROKER_ID
            value: "1"
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: zookeeper-service:2181
          - name: KAFKA_LISTENERS
            value: LISTENER_INTERNAL://kafka-service:9092,LISTENER_EXTERNAL://localhost:9093
          - name: KAFKA_ADVERTISED_LISTENERS
            value: LISTENER_INTERNAL://kafka-service:9092,LISTENER_EXTERNAL://localhost:9093
          - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
            value: LISTENER_INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT
          - name: KAFKA_INTER_BROKER_LISTENER_NAME
            value: LISTENER_INTERNAL
         volumeMounts:
          - name: data
            mountPath: /mnt/kafka
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "1Gi"
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: {{ .Values.services.kafka.name }}
  name: {{ .Values.services.kafka.name }}
spec:
  ports:
   - name: kafka-port
     port: 9092
     protocol: TCP
     targetPort: 9092
  selector:
    app: kafka-service
  clusterIP: None
  type: ClusterIP

    